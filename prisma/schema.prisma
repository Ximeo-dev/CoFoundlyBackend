generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid()) @db.Uuid
  email            String            @unique
  role             UserRole          @default(USER)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  BlogPost         BlogPost[]
  Idea             Idea[]
  Message          Message[]
  OAuthAccount     OAuthAccount[]
  projectsOwned    Project[]         @relation("UserProjects")
  securitySettings SecuritySettings?
  Subscription     Subscription[]
  Chat             Chat[]            @relation("ChatParticipants")
  interests        Interest[]        @relation("InterestToUser")
  projectsJoined   Project[]         @relation("ProjectMembers")
  profile           UserProfile?
}

enum UserRole {
  ADMIN
  CONTENT
  USER
}

model UserProfile {
  id  Int     @id @default(autoincrement())
  userId  String  @unique @db.Uuid
  user  User    @relation(fields: [userId], references: [id])
  name String
  birthDate DateTime @db.Date
  country String?
  city String?
  timezone String?
  bio String
  portfolio String[]
  jobId Int?
  job Job? @relation(fields: [jobId], references: [id])
  skills Skill[]
  languages Language[]
  industries Industry[]
  likes Int @default(0)
  hasAvatar Boolean @default(false)

  performedSwipes Swipe[] @relation("SwipesFrom")
  receivedSwipes Swipe[] @relation("SwipesTo")
  MatchesAsA Match[] @relation("MatchesA")
  MatchesAsB Match[] @relation("MatchesB")

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([userId])
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  ownerId     String        @db.Uuid
  status      ProjectStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Idea        Idea[]
  owner       User          @relation("UserProjects", fields: [ownerId], references: [id])
  teamMembers User[]        @relation("ProjectMembers")
}

model Job {
  id    Int @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  profiles UserProfile[]

  @@index([name])
}

model Skill {
  id    Int @id @default(autoincrement())
  name  String @unique @db.VarChar(255)
  profiles UserProfile[]

  @@index([name])
}

model Language {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  profiles UserProfile[]

  @@index([name])
}

model Industry {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  profiles UserProfile[]

  @@index([name])
}

// model ProjectRole {
//   id Int @id @default(autoincrement())
//   name String @unique @db.VarChar(255)
//   profiles UserProfile[]
// }

model Interest {
  id   Int          @id @default(autoincrement())
  type InterestType
  User User[]       @relation("InterestToUser")
}

model SecuritySettings {
  id               Int     @id @default(autoincrement())
  userId           String  @unique @db.Uuid
  passwordHash     String
  twoFactorEnabled Boolean @default(false)
  telegramId String?
  twoFactorToken String?
  isEmailConfirmed Boolean @default(false)
  emailConfirmationToken String?
  changeEmailToken String?
  resetPasswordToken String?
  jwtTokenVersion Int @default(0)
  user             User    @relation(fields: [userId], references: [id])
}

model Swipe {
  id         BigInt      @id @default(autoincrement())
  fromProfileId Int
  toProfileId   Int
  isLiked      Boolean
  createdAt  DateTime @default(now())

  fromProfile   UserProfile     @relation("SwipesFrom", fields: [fromProfileId], references: [id])
  toProfile     UserProfile     @relation("SwipesTo", fields: [toProfileId], references: [id])

  @@unique([fromProfileId, toProfileId])
  @@index([toProfileId])
}

model Match {
  id         Int      @id @default(autoincrement())
  profileAId    Int
  profileBId    Int
  createdAt  DateTime @default(now())

  profileA      UserProfile     @relation("MatchesA", fields: [profileAId], references: [id])
  profileB      UserProfile     @relation("MatchesB", fields: [profileBId], references: [id])

  @@unique([profileAId, profileBId])
}

model Idea {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  ownerId     String   @db.Uuid
  projectId   Int
  likes       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation(fields: [ownerId], references: [id])
  project     Project  @relation(fields: [projectId], references: [id])
}

model BlogPost {
  id         Int       @id @default(autoincrement())
  title      String
  content    String
  categoryId Int?
  authorId   String    @db.Uuid
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  author     User      @relation(fields: [authorId], references: [id])
  category   Category? @relation(fields: [categoryId], references: [id])
  tags       Tag[]     @relation("BlogPostTags")
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  blogPosts BlogPost[]
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  blogPosts BlogPost[] @relation("BlogPostTags")
}

model Chat {
  id           Int       @id @default(autoincrement())
  type         ChatType  @default(DIRECT)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
  participants User[]    @relation("ChatParticipants")
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  senderId  String   @db.Uuid
  content   String
  sentAt    DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])

  @@index([senderId, chatId])
}

model PricingPlan {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  features     String
  price        Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]
}

model Subscription {
  id          Int         @id @default(autoincrement())
  userId      String      @db.Uuid
  planId      Int
  startedAt   DateTime    @default(now())
  endsAt      DateTime
  isActive    Boolean
  isAutoRenew Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  plan        PricingPlan @relation(fields: [planId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}

model OAuthAccount {
  id                Int     @id @default(autoincrement())
  provider          String
  providerAccountId String
  userId            String  @db.Uuid
  accessToken       String?
  refreshToken      String?
  user              User    @relation(fields: [userId], references: [id])
}

enum InterestType {
  FIND_PROJECT
  FIND_PEOPLE
  HAVE_PROJECT
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum MatchStatus {
  ACCEPTED
  REJECTED
  PENDING
}

enum ChatType {
  DIRECT
  GROUP
}
